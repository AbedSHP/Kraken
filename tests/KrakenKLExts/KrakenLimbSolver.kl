require Math;
require Kraken;
require TwoBoneChainSolver;


object LimbSolver : KrakenSolver {
  TwoBoneChainSolver twoBoneChain;
  Mat44 bone01Out;
  Mat44 bone02Out;
  Mat44 bone03Out;
};


inline LimbSolver() {
}


// Return Arguments for Kraken
function KrakenSolverArg[] LimbSolver.getArguments(){
    KrakenSolverArg args[];
    args.push(KrakenSolverArg('bone1Len', 'in', 'Float32'));
    args.push(KrakenSolverArg('bone2Len', 'in', 'Float32'));
    args.push(KrakenSolverArg('fkik', 'in', 'Float32'));
    args.push(KrakenSolverArg('softIK', 'in', 'Float32'));
    args.push(KrakenSolverArg('softDist', 'in', 'Float32'));
    args.push(KrakenSolverArg('stretch', 'in', 'Float32'));
    args.push(KrakenSolverArg('stretchBlend', 'in', 'Float32'));
    args.push(KrakenSolverArg('rightSide', 'in', 'Boolean'));
    args.push(KrakenSolverArg('root', 'in', 'Mat44'));
    args.push(KrakenSolverArg('bone1FK', 'in', 'Mat44'));
    args.push(KrakenSolverArg('bone2FK', 'in', 'Mat44'));
    args.push(KrakenSolverArg('ikHandle', 'in', 'Mat44'));
    args.push(KrakenSolverArg('upV', 'in', 'Mat44'));
    args.push(KrakenSolverArg('bone01Out', 'io', 'Mat44'));
    args.push(KrakenSolverArg('bone02Out', 'io', 'Mat44'));
    args.push(KrakenSolverArg('bone03Out', 'io', 'Mat44'));
    return args;
}


// Solve
function LimbSolver.solve!
(
  Scalar bone1Len,
  Scalar bone2Len,
  Scalar fkik,
  Boolean softIK,
  Scalar softDist,
  Boolean stretch,
  Scalar stretchBlend,
  Boolean rightSide,
  Mat44 root,
  Mat44 bone1FK,
  Mat44 bone2FK,
  Mat44 ikHandle,
  Mat44 upV
  )
{
  this.twoBoneChain.bone1Len = bone1Len;
  this.twoBoneChain.bone2Len = bone2Len;
  this.twoBoneChain.fkik = fkik;
  this.twoBoneChain.softIK = softIK;
  this.twoBoneChain.softDist = softDist;
  this.twoBoneChain.stretch = stretch;
  this.twoBoneChain.stretchBlend = stretchBlend;
  this.twoBoneChain.rightSide = rightSide;
  this.twoBoneChain.root = root;
  this.twoBoneChain.bone1FK = bone1FK;
  this.twoBoneChain.bone2FK = bone2FK;
  this.twoBoneChain.ikHandle = ikHandle;
  this.twoBoneChain.upV = upV;

  this.twoBoneChain.solve();

  this.bone01Out = this.twoBoneChain.outMatrices[0];
  this.bone02Out = this.twoBoneChain.outMatrices[1];
  this.bone03Out = this.twoBoneChain.outMatrices[2];
}