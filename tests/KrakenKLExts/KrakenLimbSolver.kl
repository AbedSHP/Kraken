require Math;
require Kraken;
require TwoBoneChainSolver;
require InlineDrawing;
require DrawingUtils;

object LimbSolver : KrakenSolver {
  Boolean debug;
  TwoBoneChainSolver twoBoneChain;
  InlineTransform rootTransform;
};


// Default Constructor
inline LimbSolver() {
  this.debug = false;

  InlineDrawing draw = OGLInlineDrawing_GetInstance();
  this.rootTransform = StaticInlineTransform('LimbSolver', Xfo());
  draw.getRoot().addChild(this.rootTransform);

}


// Return Arguments for Kraken
function KrakenSolverArg[] LimbSolver.getArguments(){
  KrakenSolverArg args[];
  args.push(KrakenSolverArg('debug', 'in', 'Boolean'));
  args.push(KrakenSolverArg('bone1Len', 'in', 'Scalar'));
  args.push(KrakenSolverArg('bone2Len', 'in', 'Scalar'));
  args.push(KrakenSolverArg('fkik', 'in', 'Scalar'));
  args.push(KrakenSolverArg('softIK', 'in', 'Boolean'));
  args.push(KrakenSolverArg('softDist', 'in', 'Scalar'));
  args.push(KrakenSolverArg('stretch', 'in', 'Boolean'));
  args.push(KrakenSolverArg('stretchBlend', 'in', 'Scalar'));
  args.push(KrakenSolverArg('rightSide', 'in', 'Boolean'));
  args.push(KrakenSolverArg('root', 'in', 'Mat44'));
  args.push(KrakenSolverArg('bone1FK', 'in', 'Mat44'));
  args.push(KrakenSolverArg('bone2FK', 'in', 'Mat44'));
  args.push(KrakenSolverArg('ikHandle', 'in', 'Mat44'));
  args.push(KrakenSolverArg('upV', 'in', 'Mat44'));
  args.push(KrakenSolverArg('bone01Out', 'io', 'Mat44'));
  args.push(KrakenSolverArg('bone02Out', 'io', 'Mat44'));
  args.push(KrakenSolverArg('bone03Out', 'io', 'Mat44'));
  return args;
}


// Solve
function LimbSolver.solve!
(
  in Boolean debug,
  in Scalar bone1Len,
  in Scalar bone2Len,
  in Scalar fkik,
  in Boolean softIK,
  in Scalar softDist,
  in Boolean stretch,
  in Scalar stretchBlend,
  in Boolean rightSide,
  in Mat44 root,
  in Mat44 bone1FK,
  in Mat44 bone2FK,
  in Mat44 ikHandle,
  in Mat44 upV,
  io Mat44 bone01Out,
  io Mat44 bone02Out,
  io Mat44 bone03Out
  )
{
  this.debug = debug;

  this.twoBoneChain = TwoBoneChainSolver();
  this.twoBoneChain.bone1Len = bone1Len;
  this.twoBoneChain.bone2Len = bone2Len;
  this.twoBoneChain.fkik = fkik;
  this.twoBoneChain.softIK = softIK;
  this.twoBoneChain.softDist = softDist;
  this.twoBoneChain.stretch = stretch;
  this.twoBoneChain.stretchBlend = stretchBlend;
  this.twoBoneChain.rightSide = rightSide;
  this.twoBoneChain.root = root;
  this.twoBoneChain.bone1FK = bone1FK;
  this.twoBoneChain.bone2FK = bone2FK;
  this.twoBoneChain.ikHandle = ikHandle;
  this.twoBoneChain.upV = upV;

  this.twoBoneChain.solve();

  bone01Out = this.twoBoneChain.outMatrices[0];
  bone02Out = this.twoBoneChain.outMatrices[1];
  bone03Out = this.twoBoneChain.outMatrices[2];

  Xfo bone01DebugXfo = Xfo();
  Xfo bone02DebugXfo = Xfo();
  Xfo bone03DebugXfo = Xfo();

  bone01DebugXfo = bone01Out;
  bone02DebugXfo = bone02Out;
  bone03DebugXfo = bone03Out;

  // Debugging
  if (this.debug) {
    etDrawBone(this.rootTransform, 'bone01', bone01DebugXfo, this.twoBoneChain.bone1Len, 0.25, Color(0, 0.5, 0));
    etDrawBone(this.rootTransform, 'bone02', bone02DebugXfo, this.twoBoneChain.bone2Len, 0.25, Color(0, 0.5, 0));
    etDrawBone(this.rootTransform, 'bone03', bone03DebugXfo, 1, 0.25, Color(0, 0.5, 0));

    drawLine(this.rootTransform, 'upVLine', bone02Out.translation(), this.twoBoneChain.upV.translation(), Color(1.0, 1.0, 0));
  }
  else {
    // Figure out how to hide the shapes!!!
  }

}