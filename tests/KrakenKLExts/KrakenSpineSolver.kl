require Math;
require Kraken;
require RiggingToolkit;
require InlineDrawing;
require DrawingUtils;

object SpineSolver : KrakenSolver {
  BezierXfo curve;
};


// Default Constructor
inline SpineSolver() {
}


function KrakenSolverArg[] SpineSolver.getArguments(){
  KrakenSolverArg args[];
  args.push(KrakenSolverArg('maxLength', 'in', 'Scalar'));
  args.push(KrakenSolverArg('tangentLength', 'in', 'Scalar'));
  args.push(KrakenSolverArg('spine01Ctrl', 'in', 'Mat44'));
  args.push(KrakenSolverArg('spine02Ctrl', 'in', 'Mat44'));
  args.push(KrakenSolverArg('spine03Ctrl', 'in', 'Mat44'));
  args.push(KrakenSolverArg('spine01Out', 'io', 'Mat44'));
  args.push(KrakenSolverArg('spine02Out', 'io', 'Mat44'));
  args.push(KrakenSolverArg('spine03Out', 'io', 'Mat44'));
  args.push(KrakenSolverArg('spine04Out', 'io', 'Mat44'));

  return args;
}

function SpineSolver.solve!
(
  in Scalar tangentLength,
  in Scalar maxLength,
  in Mat44 spine01Ctrl,
  in Mat44 spine02Ctrl,
  in Mat44 spine03Ctrl,
  io Mat44 spine01Out,
  io Mat44 spine02Out,
  io Mat44 spine03Out,
  io Mat44 spine04Out
  )
{
  report("Solving spine!");

  this.curve = BezierXfo();
  this.curve.tangentLength = tangentLength;

}


operator solveArmSpliceOp(
  io SpineSolver solver,
  in Mat44 base,
  in Scalar followClav_input,
  io Mat44 wrist_output
    )
{
    solver.solve(base, followClav_input, wrist_output);
}