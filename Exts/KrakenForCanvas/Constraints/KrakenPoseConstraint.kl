require Kraken;

struct KrakenPoseConstraint : KrakenConstraint {
};

/// \dfgPresetFolder Constraints
function KrakenPoseConstraint(
  Xfo offset,
) {
  this.offset = offset;
}

/// \dfgPresetFolder Constraints
function KrakenPoseConstraint.addConstrainer!(
  Xfo constrainer
) {
  this.constrainers.push(constrainer);
}

/// \dfgPresetFolder Constraints
function Xfo KrakenPoseConstraint.compute?(
  Xfo xfo
) {
  Xfo result = xfo;
  result.tr = Vec3();
  result.ori = Quat(Vec3(0.0, 0.0, 0.0), 0.0);

  for(Size i=0;i<this.constrainers.size();i++) {
    result.tr = result.tr.add(this.constrainers[i].tr);
    result.ori = result.ori.add(this.constrainers[i].ori);
  }

  result.ori.setUnit();
  result.tr *= 1.0 / Float32(this.constrainers.size());
  
  return result * this.offset;
}
